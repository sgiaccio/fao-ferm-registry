rules_version = '2';
service cloud.firestore {
	match /databases/{database}/documents {
  	match /bestPractices/{document=**} {
      allow read: if request.auth != null // TODO
      // allow create: if request.auth != null // TODO
      allow create: if request.auth != null
                    && request.auth.token != null
                    // && request.auth.uid == request.resource.data.created_by
                    && (
                      // User is admin
                      request.auth.token.admin == true

                      // User is admin or editor in the group the data belongs to
                      ||
                      ("privileges" in request.auth.token
                       && request.auth.token.privileges[
                            get(/databases/$(database)/documents/registry/$(request.resource.data.projectId))
                          .data.group] in ["admin", "editor"]
                      )
                    )
      allow update: if request.auth != null
                    && request.auth.token != null
      							&& (!('status' in resource.data) || resource.data.status != 'published')
                    && (
                    	// User is admin
                      request.auth.token.admin == true
                      ||
                      // User is group admin
                      ("privileges" in request.auth.token
                       && request.auth.token.privileges[
                            get(/databases/$(database)/documents/registry/$(request.resource.data.projectId))
                          .data.group] in ["admin"]
                      )
                      ||
                      // User is editor and status is draft
                      ("privileges" in request.auth.token
                       && request.auth.token.privileges[
                            get(/databases/$(database)/documents/registry/$(resource.data.projectId))
                          .data.group] in ["editor"]
                       && (!('status' in resource.data) || resource.data.status == 'draft')
                       && (!('status' in request.resource.data) || request.resource.data.status in ['draft', 'submitted'])
                      )
                    )
      allow delete: if request.auth != null
    }
  	match /areas/{document=**} {
      allow read: if request.auth != null
      allow create: if request.auth != null
      allow update: if request.auth != null
      allow delete: if request.auth != null
    }
    
    match /users/{document=**} {
    	allow create, read, update, delete: if request.auth != null
      && (request.auth.token.admin == true || request.auth.uid == resource.id)
    }
  }
  
  match /databases/{database}/documents {
    match /registry/{document=**} {
      // allow list: if debug(resource.data.public == true)
      allow create: if request.auth != null
                        && request.auth.token != null
                        && request.auth.uid == request.resource.data.created_by
                        && (
                          // User is admin
                          request.auth.token.admin == true

                          // User is admin or editor in the group the data belongs to
                          ||
                          ("privileges" in request.auth.token && request.auth.token.privileges[request.resource.data.group] in ["admin", "editor"])
                        )
                            
    	allow read: if "public" in resource.data && resource.data.public == true
                     || request.auth != null
                     && (
                        request.auth.token.admin == true

                        // user is the creator of the resource
                        || request.auth.uid == resource.data.created_by

                        // it's a new record - used to create a temporary ID
                        || resource == null

                        // has any group privileges (admin, editor or guest)
                        || (
                          "privileges" in request.auth.token
                          && resource.data.group in request.auth.token.privileges.keys()
                          // && request.auth.token.privileges.get(resource.data.group, null) in ["admin", "editor", "guest"]
                        )
                     )
                     

                     
    	allow update: if request.auth != null
      											// can't change the created by value
                            && !request.resource.data.diff(resource.data).affectedKeys().hasAny(['created_by'])
                            && (
                              // User is admin
                              request.auth.token.admin == true
                              
                              ||
                              request.auth.token.privileges[resource.data.group] in ["editor"]
                              && request.auth.uid == resource.data.created_by
                              // && (!resource.data.status || resource.data.status == 'draft')
                              
                              ||  
                              "privileges" in request.auth.token
                               && request.auth.token.privileges[resource.data.group] in ["admin"])
                            
  
      allow delete: if request.auth != null       
                             && (
                               // User is admin
                               request.auth.token.admin == true

                               ||
                               ("privileges" in request.auth.token
                               && request.auth.token.privileges[resource.data.group] in ["admin", "editor"]))
                             

    }



    match /groups/{document=**} {
      // allow list: if debug(resource.data.public == true)
    	allow create, read, update, delete: if request.auth != null
    }


    // match /user-registration/{document=**} {
    // 	allow create, read, update, delete: if request.auth.token.admin == true
    // }

}
}
