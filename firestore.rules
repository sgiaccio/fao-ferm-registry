rules_version = '2';
service cloud.firestore {
	match /databases/{database}/documents {

    function isSignedIn() {
      // Determine if the user is signed in
      return request.auth != null;
    }

    function isAdmin() {
      // Determine if the user is an admin
      return isSignedIn() && ("token" in request.auth) && ("admin" in request.auth.token) && request.auth.token.admin == true;
    }

    function getRole(rsc) {
      // Determine the role of the user in the group - returns null if privileges not defined
      return ("privileges" in request.auth.token) ? request.auth.token.privileges[rsc.data.group] : null;
    }

    function isOneOfRoles(rsc, array) {
      // Determine if the user has one of an array of roles in the resource group
      return isSignedIn() && (getRole(rsc) in array)
    }

    function getStatus(rsc) {
      // Determine the status of the resource
      return ("status" in rsc.data) ? rsc.data.status : null;
    }

    function isOneOfStatuses(rsc, array) {
      // Determine if the resource has one of an array of statuses
      return getStatus(rsc) in array;
    }

    // Project registry documents
    match /registry/{document=**} {
      allow create: if isSignedIn()
                        // && request.auth.token != null

                        // The user is the creator of the resource
                        && request.auth.uid == request.resource.data.created_by
                        
                        && (
                          // The user is a superadmin
                          isAdmin()

                          // The group exists
                          && ('group' in request.resource.data) && exists(/databases/$(database)/documents/groups/$(request.resource.data.group))

                          // User is admin or editor in the project group
                          || isOneOfRoles(request.resource, ["admin", "editor"])
                          
                          // ("privileges" in request.auth.token && request.auth.token.privileges[request.resource.data.group] in ["admin", "editor"])
                        )

      allow read: if "public" in resource.data && resource.data.public == true
                      || (
                        isAdmin()
                        // user is the creator of the resource
                        // commented ouy because he shouldnt be able to read it if he is not in the group
                        // || request.auth.uid == resource.data.created_by

                        // it's a new record - used to create a temporary ID
                        || resource == null

                        // has any group privileges (admin, editor or guest)
                        || isOneOfRoles(resource, ["admin", "editor", "guest"])
                          // "privileges" in request.auth.token
                          // && resource.data.group in request.auth.token.privileges.keys()
                          // && request.auth.token.privileges.get(resource.data.group, null) in ["admin", "editor", "guest"]
                      )
              
      allow update: if (isAdmin()
                        // User is group editor and the user is the creator of the resource
                        || isOneOfRoles(resource, ["editor"]) && request.auth.uid == resource.data.created_by
                        // TODO re enable this condition and test
                        // && (!resource.data.status || resource.data.status == 'draft')

                        // Or user is group admin
                        || isOneOfRoles(resource, ["admin"])
                      ) 
                      // Users cannnot change the created by value
                      && !request.resource.data.diff(resource.data).affectedKeys().hasAny(['created_by'])

      allow delete: if isAdmin()
        // User is group editor and the user is the creator of the resource
        || (isOneOfRoles(resource, ["editor"]) && request.auth.uid == resource.data.created_by)
        // TODO re enable this condition and test
        // && (!resource.data.status || resource.data.status == 'draft')

        // User is group admin
        || isOneOfRoles(resource, ["admin"])

        // && request.auth.token.privileges[resource.data.group] in ["admin", "editor"]))
    }

    // Best practice documents
    match /bestPractices/{document=**} {
      allow read: if isAdmin()
        || isOneOfRoles(get(/databases/$(database)/documents/registry/$(resource.data.projectId)), ["admin", "editor", "guest"])

      allow create: if isSignedIn()
                    && request.auth.token != null
                    // && request.auth.uid == request.resource.data.created_by
                    && (
                      isAdmin()

                      // User is admin or editor in the related project group
                      || isOneOfRoles(get(/databases/$(database)/documents/registry/$(request.resource.data.projectId)), ["admin", "editor"])

                      // ("privileges" in request.auth.token
                      //  && request.auth.token.privileges[
                      //       get(/databases/$(database)/documents/registry/$(request.resource.data.projectId))
                      //     .data.group] in ["admin", "editor"]
                      // )
                    )
      allow update: if isSignedIn()
                    && request.auth.token != null

                    // Best practice is not published
      							&& (!('status' in resource.data) || resource.data.status != 'published')
                    
                    && (
                      isAdmin()

                      // User is admin in the related project group
                      || isOneOfRoles(get(/databases/$(database)/documents/registry/$(request.resource.data.projectId)), ["admin"])

                      // ("privileges" in request.auth.token
                      //  && request.auth.token.privileges[
                      //       get(/databases/$(database)/documents/registry/$(request.resource.data.projectId))
                      //     .data.group] in ["admin"]
                      // )

                      // User is editor of the related project group
                      || isOneOfRoles(get(/databases/$(database)/documents/registry/$(request.resource.data.projectId)), ["editor"]) 

                        // and the best practice is in draft status
                        && (!('status' in resource.data) || resource.data.status == 'draft')

                        // and the best practice new status is draft or submitted
                        && (!('status' in request.resource.data) || request.resource.data.status in ['draft', 'submitted'])

                      // ("privileges" in request.auth.token
                      //  && request.auth.token.privileges[
                      //       get(/databases/$(database)/documents/registry/$(resource.data.projectId))
                      //     .data.group] in ["editor"]
                      //  && (!('status' in resource.data) || resource.data.status == 'draft')
                      //  && (!('status' in request.resource.data) || request.resource.data.status in ['draft', 'submitted'])
                      // )
                    )
      // allow delete: if isSignedIn()
    }

    // Project areas documents
  	match /areas/{document=**} {
      allow read: if isSignedIn()
      allow create: if isSignedIn()
      allow update: if isSignedIn()
      allow delete: if isSignedIn()
    }
    
    // User data documents
    match /users/{document=**} {
      allow create: if isAdmin() || isSignedIn() && request.auth.uid == request.resource.id
      allow read:   if isAdmin() || isSignedIn() && request.auth.uid == resource.id
      allow update: if isAdmin() || isSignedIn() && request.auth.uid == request.resource.id
      allow delete: if isAdmin()
        && (!("privileges" in request.auth.token)) ||
        (request.auth.token.privileges.size() == 0)
    }

    // Group documents
    match /groups/{document=**} {
      allow read: if isSignedIn()
      allow create, update, delete: if isAdmin()
    }
  }  
}
