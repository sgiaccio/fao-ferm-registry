rules_version = '2';
service cloud.firestore {
    match /databases/{database}/documents {

        function isSignedIn() {
            // Determine if the user is signed in
            return request.auth != null;
        }

        function isAdmin() {
            // Determine if the user is an admin
            return isSignedIn() && ("token" in request.auth) && ("admin" in request.auth.token) && request.auth.token.admin == true;
        }

        function getRole(group) {
            // Determine the role of the user in the group - returns null if privileges not defined
            return isSignedIn()
                ? (("privileges" in request.auth.token)
                    ? request.auth.token.privileges[group]
                    : null)
                : null;
        }

        function isOneOfRoles(rsc, array) {
            // Determine if the user has one of an array of roles in the resource group
            return getRole(rsc.data.group) in array
        }

        function getStatus(rsc) {
            // Determine the status of the resource
            return ("status" in rsc.data) ? rsc.data.status : "draft";
        }

        function isOneOfStatuses(rsc, array) {
            // Determine if the resource has one of an array of statuses
            return getStatus(rsc) in array;
        }

        // Project registry documents
        match /registry/{projectId} {
            // allow create: if isSignedIn()
            allow create: if isSignedIn()
                // && request.auth.token != null

                // The document status is draft or not defined
                && (!('status' in request.resource.data) || request.resource.data.status == 'draft')

                // The user is the creator of the resource
                && request.auth.uid == request.resource.data.created_by
                && (
                // The user is a superadmin
                    isAdmin()

                    // The group exists
                    && ('group' in request.resource.data) && exists(/databases/$(database)/documents/groups/$(request.resource.data.group))

                    // User is admin or editor in the project group
                    || isOneOfRoles(request.resource, ["admin", "editor"])
                )

            allow read: if isAdmin()
                    // user is the creator of the resource
                    // commented ouy because he shouldn't be able to read it if he is not in the group
                    // || request.auth.uid == resource.data.created_by

                    // it's a new record - used to create a temporary ID
                    || resource == null

                    // has any group privileges (admin, editor or guest)
                    || isOneOfRoles(resource, ["admin", "editor", "guest"])

            allow update: if (isAdmin()
                // User is group editor and the user is the creator of the resource
                || isOneOfRoles(resource, ["editor"]) && request.auth.uid == resource.data.created_by
                // TODO re enable this condition and test
                // && (!resource.data.status || resource.data.status == 'draft')

                // Or user is group admin
                || isOneOfRoles(resource, ["admin"])
            )
                // No one can change the created_by and created_by_name values directly - need to use the change created by functions
                // created_by is in fact owner
                && !request.resource.data.diff(resource.data).affectedKeys().hasAny(['created_by'])
                // && !request.resource.data.diff(resource.data).affectedKeys().hasAny(['created_by_name'])
                // No one can change the group value directly - need to use the change group functions
                && !request.resource.data.diff(resource.data).affectedKeys().hasAny(['group'])
                // No one can change the status value directly - need to use the change status functions
                && !request.resource.data.diff(resource.data).affectedKeys().hasAny(['status'])

            allow delete: if isAdmin()
                // User is group editor and the user is the creator of the resource
                || (isOneOfRoles(resource, ["editor"]) && request.auth.uid == resource.data.created_by)
                // TODO re enable this condition and test
                // && (!resource.data.status || resource.data.status == 'draft')

                // User is group admin
                || isOneOfRoles(resource, ["admin"])

            // bestPractices subcollection
            match /bestPractices/{bpId} {
                allow create: if isSignedIn()
                    && request.auth.token != null
                    && request.resource.data.created_by == request.auth.uid
                    && (
                        isAdmin()
                        || debug(projectId !=  null) && isOneOfRoles(debug(get(/databases/$(database)/documents/registry/$(projectId))), ["admin", "editor"])
                    )
                    && (!('status' in request.resource.data) || request.resource.data.status == 'draft');
                allow read: if isAdmin()
                    || isOneOfRoles(get(/databases/$(database)/documents/registry/$(projectId)), ["admin", "editor", "guest"]);
                allow update: if isSignedIn()
                    && request.auth.token != null
                    // // Best practice is not published
                    // && (!('status' in resource.data) || resource.data.status != 'published')
                    // createTime, submittedTime, and publishedTime are not changed
                    && !request.resource.data.diff(resource.data).affectedKeys().hasAny(['createTime', 'submittedTime', 'publishedTime', 'created_by'])
                    && (
                        // Superadmins can update without further restrictions
                        isAdmin()
                        || (
                            // status is draft and new status is draft or submitted
                            (!('status' in resource.data) || resource.data.status == 'draft')
                            && (!('status' in request.resource.data) || request.resource.data.status in ['draft', 'submitted'])
                            && (
                                // User is admin in the related project group
                                isOneOfRoles(get(/databases/$(database)/documents/registry/$(projectId)), ["admin"])
                                // Or user is editor of the related project group and the user is the creator of the resource
                                || (
                                    isOneOfRoles(get(/databases/$(database)/documents/registry/$(projectId)), ["editor"])
                                    && resource.data.created_by == request.auth.uid
                                )
                            )
                        )
                    );
                allow delete: if isSignedIn()
                    && request.auth.token != null

                    // Best practice is not published
                    && (!('status' in resource.data) || resource.data.status != 'published')
                    && (
                        isAdmin()

                        // User is admin in the related project group
                        || isOneOfRoles(get(/databases/$(database)/documents/registry/$(projectId)), ["admin"])

                        // User is editor of the related project group
                        || isOneOfRoles(get(/databases/$(database)/documents/registry/$(projectId)), ["editor"]) && resource.data.created_by == request.auth.uid
                        // and the best practice is in draft status
                        && (!('status' in resource.data) || resource.data.status == 'draft')
                    )

                }
    
        }

        // Best practice documents
        // match /bestPractices/{document=**} {
        //     allow read: if isAdmin()
        //         || isOneOfRoles(get(/databases/$(database)/documents/registry/$(resource.data.projectId)), ["admin", "editor", "guest"])

        //     allow create: if isSignedIn()
        //         && request.auth.token != null
        //         // && request.auth.uid == request.resource.data.created_by
        //         && (
        //             isAdmin()
        //             // User is admin or editor in the related project group
        //             || isOneOfRoles(get(/databases/$(database)/documents/registry/$(request.resource.data.projectId)), ["admin", "editor"])
        //         )
        //         // The document status is draft or not defined
        //         && (!('status' in request.resource.data) || request.resource.data.status == 'draft')
        //     allow update: if isSignedIn()
        //         && request.auth.token != null

        //         // Best practice is not published
        //         && (!('status' in resource.data) || resource.data.status != 'published')
        //         && (
        //             isAdmin()

        //             // User is admin in the related project group
        //             || isOneOfRoles(get(/databases/$(database)/documents/registry/$(request.resource.data.projectId)), ["admin"])

        //             // User is editor of the related project group
        //             || isOneOfRoles(get(/databases/$(database)/documents/registry/$(request.resource.data.projectId)), ["editor"])

        //             // and the best practice is in draft status
        //             && (!('status' in resource.data) || resource.data.status == 'draft')

        //             // and the best practice new status is draft or submitted
        //             && (!('status' in request.resource.data) || request.resource.data.status in ['draft', 'submitted'])

        //             // and createTime, submittedTime, and publishedTime are not changed - TODO tests
        //             && !request.resource.data.diff(resource.data).affectedKeys().hasAny(['createTime', 'submittedTime', 'publishedTime'])
        //         )
        //     allow delete: if isSignedIn()
        //         && request.auth.token != null

        //         // Best practice is not published
        //         && (!('status' in resource.data) || resource.data.status != 'published')
        //         && (
        //             isAdmin()

        //             // User is admin in the related project group
        //             || isOneOfRoles(get(/databases/$(database)/documents/registry/$(request.resource.data.projectId)), ["admin"])

        //             // User is editor of the related project group
        //             || isOneOfRoles(get(/databases/$(database)/documents/registry/$(request.resource.data.projectId)), ["editor"])
        //             // and the best practice is in draft status
        //             && (!('status' in resource.data) || resource.data.status == 'draft')
        //         )
        // }

        // Project areas documents
        match /areas/{document=**} {
            allow read: if isSignedIn()
            allow create: if isSignedIn()
            allow update: if isSignedIn()
            allow delete: if isSignedIn()
        }

        // User data documents
        match /users/{document=**} {
            allow create: if isAdmin() || isSignedIn() && request.auth.uid == request.resource.id
            allow read: if isAdmin() || isSignedIn() && request.auth.uid == resource.id
            allow update: if isAdmin() || isSignedIn() && request.auth.uid == request.resource.id
            allow delete: if isAdmin()
                && (!("privileges" in request.auth.token)) ||
                    (request.auth.token.privileges.size() == 0)
        }

        // Group documents
        match /groups/{document=**} {
            allow read: if isSignedIn()
            allow create, update, delete: if isAdmin()
        }

        // TODO tests
        match /assignementRequests/{document=**} {
            allow read: if isSignedIn() // TODO fix the rule below
            // allow read: if debug(isAdmin()) || getRole(debug(resource.data.groupId)) == 'admin' || (isSignedIn() && request.auth.uid == resource.data.userId)
            allow create: if request.resource.data.userId == request.auth.uid
                && request.resource.data.status == 'pending'
                && request.resource.data.groupId != null
                && request.resource.data.email == request.auth.token.email
                && exists(/databases/$(database)/documents/groups/$(request.resource.data.groupId))
            allow update: if false
            allow delete: if false
        }

        // TODO tests
        match /newGroupRequests/{document=**} {
            allow read: if isAdmin()
            allow create: if request.resource.data.userId == request.auth.uid && request.resource.data.status == 'pending'
            allow update: if false
            allow delete: if false
        }

        match /gaul/{document=**} {
            allow read: if isSignedIn()
        }

        match /menus/{document=**} {
            allow read: if isSignedIn()
        }
    }
}
